{"version":3,"sources":["logo.svg","files/sample.jpg","files/sample_video.MP4","components/Player.js","components/Landing.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Player","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isEnd","_this2","window","videojs","player","videoNode","props","console","log","on","setState","exitFullscreen","dispose","_this3","react_default","a","createElement","ref","node","className","crossOrigin","class","endScreenData","map","item","src","require","alt","name","Component","sampleData","img","url","Landing","videoJsOptions","autoplay","controls","sources","type","Player_Player","assign","App","Landing_Landing","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6FCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uLCInBC,qBACnB,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,OAAO,GAHGR,mFAOM,IAAAS,EAAAN,KAClBO,OAAOC,QAAUA,IACjBR,KAAKS,OAASD,YAAQR,KAAKU,UAAWV,KAAKW,MAAO,WAChDC,QAAQC,IAAI,gBAAiBb,QAG/BA,KAAKS,OAAOK,GAAG,KAAM,WACfR,EAAKF,MAAMC,OACbC,EAAKS,SAAS,CAAEV,OAAO,MAI3BL,KAAKS,OAAOK,GAAG,QAAS,WACtBR,EAAKS,SAAS,CAAEV,OAAO,IACvBC,EAAKG,OAAOO,kEAMVhB,KAAKS,QACPT,KAAKS,OAAOQ,2CAIP,IAAAC,EAAAlB,KACP,OACEmB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACEC,IAAK,SAAAC,GAAI,OAAKL,EAAKR,UAAYa,GAC/BC,UAAU,WACVC,YAAY,cAEbzB,KAAKI,MAAMC,MACVc,EAAAC,EAAAC,cAAA,OAAKG,UAAU,wBACbL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIK,MAAM,oBAAV,wBACAP,EAAAC,EAAAC,cAAA,OAAKK,MAAM,oBACR1B,KAAKW,MAAMgB,cAAcC,IAAI,SAAAC,GAC5B,OACEV,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACbL,EAAAC,EAAAC,cAAA,OACES,IAAKC,EAAQ,IACbC,IAAKH,EAAKI,OAEZd,EAAAC,EAAAC,cAAA,SAAIQ,EAAKI,YAQrB,WA7D0BC,cCD9BC,EAAa,CACjB,CACEF,KAAM,UACNG,IAAK,cACLC,IAAK,OAEP,CACEJ,KAAM,UACNG,IAAK,cACLC,IAAK,QAGYC,mLAEjB,IACMC,EAAiB,CACrBC,UAAU,EACVC,UAAU,EACVC,QAAS,CACP,CACEZ,IANYC,EAAQ,IAOpBY,KAAM,eAKZ,OACExB,EAAAC,EAAAC,cAAA,4BAEEF,EAAAC,EAAAC,cAACuB,EAAD9C,OAAA+C,OAAA,GAAYN,EAAZ,CAA4BZ,cAAeQ,aAjBdD,aCEtBY,mLAVX,OACE3B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAChBL,EAAAC,EAAAC,cAAC0B,EAAD,eALQb,aCOEc,QACW,cAA7BzC,OAAO0C,SAASC,UAEe,UAA7B3C,OAAO0C,SAASC,UAEhB3C,OAAO0C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6689e904.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/sample.786c4bf0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sample_video.82f43a96.MP4\";","import React, { Component } from 'react';\nimport videojs from 'video.js';\nimport '../../node_modules/video.js/dist/video-js.css';\n\nexport default class Player extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isEnd: false\n    };\n  }\n\n  componentDidMount() {\n    window.videojs = videojs;\n    this.player = videojs(this.videoNode, this.props, function onPlayerReady() {\n      console.log('onPlayerReady', this);\n    });\n\n    this.player.on('on', () => {\n      if (this.state.isEnd) {\n        this.setState({ isEnd: false });\n      }\n    });\n\n    this.player.on('ended', () => {\n      this.setState({ isEnd: true });\n      this.player.exitFullscreen();\n    });\n  }\n\n  // destroy player on unmount\n  componentWillUnmount() {\n    if (this.player) {\n      this.player.dispose();\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <video\n          ref={node => (this.videoNode = node)}\n          className=\"video-js\"\n          crossOrigin=\"anonymous\"\n        />\n        {this.state.isEnd ? (\n          <div className=\"end-screen-container\">\n            <div>\n              <h5 class=\"end-screen-title\">Sample End screen...</h5>\n              <div class=\"end-screen-items\">\n                {this.props.endScreenData.map(item => {\n                  return (\n                    <div className=\"end-screen-item\">\n                      <img\n                        src={require('../files/sample.jpg')}\n                        alt={item.name}\n                      />\n                      <p>{item.name}</p>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        ) : (\n          ''\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Player from './Player';\n\nconst sampleData = [\n  {\n    name: 'sample1',\n    img: '/sample.png',\n    url: 'url'\n  },\n  {\n    name: 'sample2',\n    img: '/sample.png',\n    url: 'url'\n  }\n];\nexport default class Landing extends Component {\n  render() {\n    const video_url = require('../files/sample_video.MP4');\n    const videoJsOptions = {\n      autoplay: true,\n      controls: true,\n      sources: [\n        {\n          src: video_url,\n          type: 'video/mp4'\n        }\n      ]\n    };\n\n    return (\n      <div>\n        Sample Video :\n        <Player {...videoJsOptions} endScreenData={sampleData} />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Landing from './components/Landing';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Landing />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}